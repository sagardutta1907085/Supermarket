@using UseCases.UseCaseInterfaces;

@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductsByCategoryId ViewProductsByCategoryId;




<div class="form-group">
	<label for="category">Category</label>
	<select id="category" @bind="SelectedCategoryId" class="form-control">
		<option value="0" selected></option>
		@foreach (var cat in categories)
		{
			<option value="@cat.CategoryId">@cat.Name</option>
		}
	</select>
</div>
<br/>

@if(productsInCategory != null)
{
	<table class="table">
	<thead>
		<tr>
			<th>Product Name</th>
			<th>Quantity Left</th>
		</tr>
	</thead>
	<tbody>
		
		@foreach(var prod in productsInCategory)
		{
			<tr @onclick="@(() => OnClickSelectProduct(prod))"
			style="@(prod.ProductId == selectedProductId? "background-color:dodgerblue;cursor:pointer;":"cursor:pointer")">
				<td>
					@prod.Name
				</td>
				<td>
					@prod.Quantity
				</td>
			</tr>
		}
		
		
	</tbody>
</table>
}
<style>
	body {
		background-image: url('https://media.istockphoto.com/photos/blurry-background-low-angle-canned-foods-aisle-section-at-american-picture-id1048717730?k=6&m=1048717730&s=612x612&w=0&h=vJw6H2PIwF_UjPN2KogQqq0FqEKMmNc1zx6-eQXCcV8=');
		background-repeat: no-repeat;
		background-size: cover;
		padding-top: 40px;
		color: black;
	}

	.container {
		background-color: transparent;
		border-radius: 5px;
		box-shadow: none padding: 40px;
	}

	h1 {
		text-align: center;
	}

	.form-label {
		font-weight: 500;
	}

	.footer {
		display: none;
	}

	#login-submit {
		margin-top: 20px;
	}

	#forgot-password,
	#register-user,
	#resend-confirmation {
		color: #007bff;
		text-decoration: none;
	}
</style>
@code {

	private IEnumerable<Product> productsInCategory;
	private int selectedProductId;

	[Parameter]
	public EventCallback<Product> OnProductSelected { get; set; }

	private int selectedCategoryId;
	private int SelectedCategoryId
	{
		get
		{
			return selectedCategoryId;
		}
		set
		{
			selectedCategoryId = value;
			productsInCategory = ViewProductsByCategoryId.Execute(value);
			OnClickSelectProduct(null);
			StateHasChanged();
		}

	}

	private IEnumerable<Category> categories;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		productsInCategory = Enumerable.Empty<Product>();
		categories = ViewCategoriesUseCase.Execute();

	}

	private void OnClickSelectProduct(Product product)
	{
		OnProductSelected.InvokeAsync(product);
		if(product != null) selectedProductId = product.ProductId;
		
	}
}



