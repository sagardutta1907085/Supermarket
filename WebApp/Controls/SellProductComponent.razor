@using UseCases.UseCaseInterfaces;
@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if(productToSell != null)

{
	@if (!string.IsNullOrWhiteSpace(errorMessage))
	{
		<div class="alert alert-danger">@errorMessage</div>
	}
	<EditForm Model="productToSell" OnValidSubmit="SellProduct">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>

		<div class="form-group">
			<label for="name">Product Name</label>
			<input class="form-control" id="name" type="text" readonly value="@productToSell.Name" />

		</div>
		<br/>
		<div class="form-group">
			<label for="price">Price</label>
			<input class="form-control" id="price" readonly value="@(string.Format("{0:c}", productToSell.Price))" />


		</div>

		<br/>
		<div class="form-group">
			<label for="quantity">Quantity</label>
			<InputNumber id="quantity" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>

		</div>

		<br/>

		<button type="submit" class="btn btn-primary">Sell</button>
	</EditForm>
	
	
	
	
}
<style>
	body {
		background-image: url('https://media.istockphoto.com/photos/blurry-background-low-angle-canned-foods-aisle-section-at-american-picture-id1048717730?k=6&m=1048717730&s=612x612&w=0&h=vJw6H2PIwF_UjPN2KogQqq0FqEKMmNc1zx6-eQXCcV8=');
		background-repeat: no-repeat;
		background-size: cover;
		padding-top: 40px;
		color: black;
	}

	.container {
		background-color: transparent;
		border-radius: 5px;
		box-shadow: none padding: 40px;
	}

	h1 {
		text-align: center;
	}

	.form-label {
		font-weight: 500;
	}

	.footer {
		display: none;
	}

	#login-submit {
		margin-top: 20px;
	}

	#forgot-password,
	#register-user,
	#resend-confirmation {
		color: #007bff;
		text-decoration: none;
	}
</style>


@code {
	private Product productToSell;
	private string errorMessage;

	[Parameter]
	public string CashierName { get; set; }

	[Parameter]
	public Product SelectedProduct { get; set; }

	[Parameter]
	public EventCallback<Product> OnProductSold { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if(SelectedProduct != null)
		{
			productToSell = new Product
				{
					ProductId = SelectedProduct.ProductId,
					Name = SelectedProduct.Name,
					Quantity = 0,
					CategoryId = SelectedProduct.CategoryId,
					Price = SelectedProduct.Price
				};
		}
		else
		{
			productToSell = null;  
		}




	}

	private void SellProduct()
	{
		if (string.IsNullOrWhiteSpace(CashierName))
		{
			errorMessage = "The Cashier's name is missing.";
			return; 
		}


		var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
		if (productToSell.Quantity <= 0)
		{
			errorMessage = "The quantity has to be greater than zero.";
		}
		else if(product.Quantity >= productToSell.Quantity)
		{
			
			OnProductSold.InvokeAsync(productToSell);
			errorMessage = string.Empty;
			SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity);
		}
		
		else
		{
			errorMessage = $"{product.Name} only has {product.Quantity} left.It is not enough.";
		}
	}
}